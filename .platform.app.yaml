# This file describes an application. You can have multiple applications
# in the same project.
#
# See https://docs.platform.sh/user_guide/reference/platform-app-yaml.html

# The name of this app. Must be unique within a project.
name: flask

# The runtime the application uses.
type: "python:3.9"

variables:
    env:
        PACKAGE_MANAGER: poetry
        PIP_VERSION: 22.0.4
        PIPENV_VERSION_BUILD: 2022.4.21
        POETRY_VERSION: 1.1.13
        POETRY_VIRTUALENVS_IN_PROJECT: true
        POETRY_VIRTUALENVS_CREATE: false

hooks:
    build: |
        set -e
        # Setup pip.
        python -m pip install pip==$PIP_VERSION
        ############### PIPENV ###################
        if [ "$PACKAGE_MANAGER" = "pipenv" ]; then
            # Install pipenv.
            pip install pipenv==$PIPENV_VERSION_BUILD
            # Check and verify the lockfile. Track failures.
            pipenv check && pipenv verify && pipenv --support > pipenv.support
            # Install dependencies to the virtual environment.
            VENV_VERSION=$(python3 -c 'import sys; print(".".join(map(str, sys.version_info[:3])))')
            pipenv --python $VENV_VERSION
            pipenv install --deploy
        ############### POETRY ###################
        elif [ "$PACKAGE_MANAGER" = "poetry" ]; then
            # Install Poetry.
            POETRY_INSTALLER='https://raw.githubusercontent.com/python-poetry/poetry/master/install-poetry.py'
            curl -sSL $POETRY_INSTALLER | POETRY_VERSION=$POETRY_VERSION python -
            # Source the Poetry command.
            # . ~/.poetry/env
            # Add Poetry to .bash_profile, so it's available during SSH.
            # echo ". $PLATFORM_APP_DIR/.poetry/env" >> ~/.bash_profile
            # Check lockfile and install dependencies.
            poetry env use system
            poetry check
            poetry install
        fi

web:
    commands:
        start: |
            ############### PIPENV ###################
            if [ "$PACKAGE_MANAGER" = "pipenv" ]; then
                pipenv run python server.py
            ############### POETRY ###################
            elif [ "$PACKAGE_MANAGER" = "poetry" ]; then
                poetry run python server.py
            fi

# The size of the persistent disk of the application (in MB).
disk: 1024
# The relationships of the application with services or other applications.
#
# The left-hand side is the name of the relationship as it will be exposed
# to the application in the PLATFORM_RELATIONSHIPS variable. The right-hand
# side is in the form `<service name>:<endpoint name>`.
relationships:
    database: "db:mysql"
    rediscache: "cache:redis"

# The configuration of app when it is exposed to the web.

source:
  operations:
    auto-update:
      command: |
        curl -fsS https://raw.githubusercontent.com/platformsh/source-operations/main/setup.sh | { bash /dev/fd/3 sop-autoupdate; } 3<&0
    
